---
export interface Props {
	title: string;
	body: string;
	href: string;
  direction: string;
}

const { href, title, body, direction } = Astro.props;
---

<div class={direction}>
  <li class="link-card">
    <a href={href}>
      <h2>
        {title}
      </h2>
      <p>
        {body}
      </p>
    </a>
  </li>
</div>
<style>
  * {
    box-sizing: border-box;
  }

  div {
    border-radius: 0.6rem;
    width: 46%;
    min-height: 15rem;
		background-image: url('../../6.jpg');
  }

	.link-card {
    min-height: 15rem;
    width: 100%;
		list-style: none;
		display: flex;
    align-items: center;
		padding: 0.25rem;
		background-size: 400%;
		border-radius: 0.6rem;
    border: 4px solid #ffc537;
		background-position: center;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
	}

	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: 1rem 1.3rem;
		border-radius: 0.35rem;
		color: #111;
		background-color: white;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: clamp(0.8rem, 2.5vw, 1.5rem);
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
    font-size: clamp(0.8rem, 1.5vw, 1.2rem);
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: #444;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		/* color: rgb(var(--accent)); */
	}

  .slidecard-right {
    transform: translateX(-40vw);
    transition: all 1s;
    opacity: 0%;
    transition-delay: 0.2s;
  }
  .slidecard-left {
    transform: translateX(40vw);
    transition: all 1s;
    opacity: 0%;
    transition-delay: 0.2s;
  }
  .fade-in-right {
    transform: translateX(0);
    opacity: 100%;
  }

  .fade-in-left {
    transform: translateX(0);
    opacity: 100%;
  } 

  @media (max-width: 350px) {
    .link-card > a {
      padding: 0.5rem 0.7rem;
    }
  }
</style>

<script>
// Create the observer
var observerLeft = new IntersectionObserver(entries => {
  entries.forEach(entry => {
      if (entry.isIntersecting) {
      // Add the CSS class that has your animation
      entry.target.classList.add('fade-in-left');
      return;
    }
    // entry.target.classList.remove('fade-in-left');
  })
});

var observerRight = new IntersectionObserver(entries => {
  entries.forEach(entry => {
      if (entry.isIntersecting) {
      // Add the CSS class that has your animation
      entry.target.classList.add('fade-in-right');
      return;
    }
    // entry.target.classList.remove('fade-in-right');
  })
});

// Observe the element
var elements = document.querySelectorAll('.slidecard-left');
elements.forEach(element => observerLeft.observe(element));

var elements = document.querySelectorAll('.slidecard-right');
elements.forEach(element => observerRight.observe(element));
</script>